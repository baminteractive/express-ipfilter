{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","module","exports","ipfilter","ips","opts","getIps","isFunction","logger","message","console","log","settings","defaults","mode","logF","allowedHeaders","allowPrivateIPs","excluding","detectIp","getClientIp","req","ipAddresses","headerIp","reduce","acc","header","testIp","headers","split","length","connection","remoteAddress","map","ipAddress","isV6Format","indexOf","isV4Format","matchClientIp","ip","toLowerCase","result","invoke","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","startIp","toLong","endIp","longIp","error","next","err","join","res","results","exclude","regex","RegExp","test","url","logLevel","_ips","matchResults"],"mappings":"AAAA;;;;;;AAMA;;AAEA;;;;;;AAGA,IAAIA,IAAIC,QAAQ,QAAR,CAAR;AACA,IAAIC,SAASD,QAAQ,IAAR,CAAb;AACA,IAAIE,aAAaF,QAAQ,aAAR,CAAjB;AACA,IAAIG,gBAAgBH,QAAQ,eAAR,CAApB;;AAEA;;;;;;;;;;;;;;;;;;;;;;;;;;;AA2BAI,OAAOC,OAAP,GAAiB,SAASC,QAAT,CAAkBC,GAAlB,EAAuBC,IAAvB,EAA6B;AAC5CD,QAAMA,OAAO,KAAb;;AAEA,MAAIE,SAASV,EAAEW,UAAF,CAAaH,GAAb,IACTA,GADS,GAET,YAAW;AACX,WAAOA,GAAP;AACD,GAJH;AAKA,MAAII,SAAS,SAATA,MAAS,CAASC,OAAT,EAAkB;AAC7BC,YAAQC,GAAR,CAAYF,OAAZ;AACD,GAFD;AAGA,MAAIG,WAAWhB,EAAEiB,QAAF,CAAWR,QAAQ,EAAnB,EAAuB;AACpCS,UAAM,MAD8B;AAEpCH,SAAK,IAF+B;AAGpCI,UAAMP,MAH8B;AAIpCQ,oBAAgB,EAJoB;AAKpCC,qBAAiB,KALmB;AAMpCC,eAAW,EANyB;AAOpCC,cAAUC;AAP0B,GAAvB,CAAf;;AAUA,WAASA,WAAT,CAAqBC,GAArB,EAA0B;AACxB,QAAIC,cAAc,EAAlB;;AAEA,QAAIC,WAAW3B,EAAE4B,MAAF,CACbZ,SAASI,cADI,EAEb,UAASS,GAAT,EAAcC,MAAd,EAAsB;AACpB,UAAIC,SAASN,IAAIO,OAAJ,CAAYF,MAAZ,CAAb;AACA,UAAIC,UAAU,EAAd,EAAkB;AAChBF,cAAME,MAAN;AACD;;AAED,aAAOF,GAAP;AACD,KATY,EAUb,EAVa,CAAf;;AAaA,QAAIF,QAAJ,EAAc;AACZD,oBAAcC,SAASM,KAAT,CAAe,GAAf,CAAd;AACD;;AAED,QAAIP,YAAYQ,MAAZ,KAAuB,CAA3B,EAA8B;AAC5BR,oBAAc,CAACD,IAAIU,UAAJ,CAAeC,aAAhB,CAAd;AACD;;AAED,QAAIV,YAAYQ,MAAZ,KAAuB,CAA3B,EAA8B;AAC5B,aAAOR,WAAP;AACD;;AAEDA,kBAAcA,YAAYW,GAAZ,CAAgB,UAASC,SAAT,EAAoB;AAChD,UAAIpC,OAAOqC,UAAP,CAAkBD,SAAlB,KAAgC,CAACA,UAAUE,OAAV,CAAkB,QAAlB,CAArC,EAAkE;AAChEF,oBAAYA,UAAUL,KAAV,CAAgB,SAAhB,EAA2B,CAA3B,CAAZ;AACD;;AAED,UAAI/B,OAAOuC,UAAP,CAAkBH,SAAlB,KAAgC,CAACA,UAAUE,OAAV,CAAkB,GAAlB,CAArC,EAA6D;AAC3DF,oBAAYA,UAAUL,KAAV,CAAgB,GAAhB,EAAqB,CAArB,CAAZ;AACD;;AAED,aAAOK,SAAP;AACD,KAVa,CAAd;;AAYA,WAAOZ,WAAP;AACD;;AAED,MAAIgB,gBAAgB,SAAhBA,aAAgB,CAASC,EAAT,EAAa;AAC/B,QAAIzB,OAAOF,SAASE,IAAT,CAAc0B,WAAd,EAAX;;AAEA,QAAIC,SAAS7C,EAAE8C,MAAF,CAASpC,QAAT,EAAmBqB,MAAnB,EAA2BY,EAA3B,EAA+BzB,IAA/B,CAAb;;AAEA,QAAIA,SAAS,OAAb,EAAsB;AACpB,aAAOlB,EAAE+C,IAAF,CAAOF,MAAP,CAAP;AACD,KAFD,MAEO;AACL,aAAO7C,EAAEgD,KAAF,CAAQH,MAAR,CAAP;AACD;AACF,GAVD;;AAYA,MAAId,SAAS,SAATA,MAAS,CAASY,EAAT,EAAazB,IAAb,EAAmB;AAC9B,QAAI+B,aAAa,IAAjB;;AAEA;AACA,QAAI,OAAOA,UAAP,KAAsB,QAA1B,EAAoC;AAClC,UAAI9C,WAAW+C,UAAX,CAAsBD,UAAtB,CAAJ,EAAuC;AACrC,eAAOE,cAAcR,EAAd,EAAkBM,UAAlB,EAA8B/B,IAA9B,CAAP;AACD,OAFD,MAEO;AACL,eAAOkC,eAAeT,EAAf,EAAmBM,UAAnB,EAA+B/B,IAA/B,CAAP;AACD;AACF;;AAED,QAAI,QAAO+B,UAAP,yCAAOA,UAAP,OAAsB,QAA1B,EAAoC;AAClC,aAAOI,UAAUV,EAAV,EAAcM,UAAd,EAA0B/B,IAA1B,CAAP;AACD;AACF,GAfD;;AAiBA,MAAIkC,iBAAiB,SAAjBA,cAAiB,CAAST,EAAT,EAAaM,UAAb,EAAyB/B,IAAzB,EAA+B;AAClD,QAAIyB,OAAOM,UAAX,EAAuB;AACrB,aAAO/B,SAAS,OAAhB;AACD,KAFD,MAEO;AACL,aAAOA,SAAS,MAAhB;AACD;AACF,GAND;;AAQA,MAAIiC,gBAAgB,SAAhBA,aAAgB,CAASR,EAAT,EAAaM,UAAb,EAAyB/B,IAAzB,EAA+B;AACjD,QAAIf,WAAWmD,OAAX,CAAmBX,EAAnB,EAAuBM,UAAvB,CAAJ,EAAwC;AACtC,aAAO/B,SAAS,OAAhB;AACD,KAFD,MAEO;AACL,aAAOA,SAAS,MAAhB;AACD;AACF,GAND;;AAQA,MAAImC,YAAY,SAAZA,SAAY,CAASV,EAAT,EAAaM,UAAb,EAAyB/B,IAAzB,EAA+B;AAC7C,QAAIqC,cAAcvD,EAAEwD,MAAF,CAAS9C,QAAT,EAAmB,UAASuC,UAAT,EAAqB;AACxD,UAAIA,WAAWf,MAAX,GAAoB,CAAxB,EAA2B;AACzB,YAAIuB,UAAUvD,OAAOwD,MAAP,CAAcT,WAAW,CAAX,CAAd,CAAd;AACA,YAAIU,QAAQzD,OAAOwD,MAAP,CAAcT,WAAW,CAAX,CAAd,CAAZ;AACA,YAAIW,SAAS1D,OAAOwD,MAAP,CAAcf,EAAd,CAAb;AACA,eAAOiB,UAAUH,OAAV,IAAqBG,UAAUD,KAAtC;AACD,OALD,MAKO;AACL,eAAOhB,OAAOM,WAAW,CAAX,CAAd;AACD;AACF,KATiB,CAAlB;;AAWA,QAAIM,YAAYrB,MAAZ,GAAqB,CAAzB,EAA4B;AAC1B,aAAOhB,SAAS,OAAhB;AACD,KAFD,MAEO;AACL,aAAOA,SAAS,MAAhB;AACD;AACF,GAjBD;;AAmBA,MAAI2C,QAAQ,SAARA,KAAQ,CAASrD,GAAT,EAAcsD,IAAd,EAAoB;AAC9B,QAAIC,MAAM,IAAI3D,aAAJ,CAAkB,kCAAkCI,IAAIwD,IAAJ,CAAS,GAAT,CAApD,CAAV;AACA,WAAOF,KAAKC,GAAL,CAAP;AACD,GAHD;;AAKA,SAAO,UAAStC,GAAT,EAAcwC,GAAd,EAAmBH,IAAnB,EAAyB;AAC9B,QAAI9C,SAASM,SAAT,CAAmBY,MAAnB,GAA4B,CAAhC,EAAmC;AACjC,UAAIgC,UAAUlE,EAAEwD,MAAF,CAASxC,SAASM,SAAlB,EAA6B,UAAS6C,OAAT,EAAkB;AAC3D,YAAIC,QAAQ,IAAIC,MAAJ,CAAWF,OAAX,CAAZ;AACA,eAAOC,MAAME,IAAN,CAAW7C,IAAI8C,GAAf,CAAP;AACD,OAHa,CAAd;;AAKA,UAAIL,QAAQhC,MAAR,GAAiB,CAArB,EAAwB;AACtB,YAAIlB,SAASD,GAAT,IAAgBC,SAASwD,QAAT,KAAsB,MAA1C,EAAkD;AAChDxD,mBAASG,IAAT,CAAc,uCAAuC+C,QAAQ,CAAR,CAArD;AACD;AACD,eAAOJ,MAAP;AACD;AACF;;AAED,QAAIW,OAAO/D,QAAX;AACA,QAAI,CAAC+D,IAAD,IAAS,CAACA,KAAKvC,MAAnB,EAA2B;AACzB,UAAIlB,SAASE,IAAT,IAAiB,OAArB,EAA8B;AAC5B;AACA,eAAO2C,MAAM,CAAC,WAAD,CAAN,EAAqBC,IAArB,CAAP;AACD,OAHD,MAGO;AACL;AACA,eAAOA,MAAP;AACD;AACF;;AAED,QAAItD,MAAMQ,SAASO,QAAT,CAAkBE,GAAlB,CAAV;;AAEA,QAAIiD,eAAelE,IAAI6B,GAAJ,CAAQ,UAASM,EAAT,EAAa;AACtC,aAAOD,cAAcC,EAAd,CAAP;AACD,KAFkB,CAAnB;;AAIA,QAAI3C,EAAEgD,KAAF,CAAQ0B,YAAR,CAAJ,EAA2B;AACzB;AACA,UAAI1D,SAASD,GAAT,IAAgBC,SAASwD,QAAT,KAAsB,MAA1C,EAAkD;AAChDxD,iBAASG,IAAT,CAAc,mCAAmCX,IAAIwD,IAAJ,CAAS,GAAT,CAAjD;AACD;;AAED,aAAOF,MAAP;AACD;;AAED;AACA,QAAI9C,SAASD,GAAT,IAAgBC,SAASwD,QAAT,KAAsB,OAA1C,EAAmD;AACjDxD,eAASG,IAAT,CAAc,kCAAkCX,IAAIwD,IAAJ,CAAS,GAAT,CAAhD;AACD;;AAED,WAAOH,MAAMrD,GAAN,EAAWsD,IAAX,CAAP;AACD,GA/CD;AAgDD,CArLD","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *          getIps = function() { return ['127.0.0.1']; };\n *\n *      app.use(ipfilter(ips));\n *      app.use(ipfilter(getIps));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - `allowPrivateIPs` whether to allow private IPs.\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses or {Function} that returns the array of IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var getIps = _.isFunction(ips)\n    ? ips\n    : function() {\n      return ips;\n    };\n  var logger = function(message) {\n    console.log(message);\n  };\n  var settings = _.defaults(opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    allowedHeaders: [],\n    allowPrivateIPs: false,\n    excluding: [],\n    detectIp: getClientIp\n  });\n\n  function getClientIp(req) {\n    var ipAddresses = [];\n\n    var headerIp = _.reduce(\n      settings.allowedHeaders,\n      function(acc, header) {\n        var testIp = req.headers[header];\n        if (testIp != '') {\n          acc = testIp;\n        }\n\n        return acc;\n      },\n      ''\n    );\n\n    if (headerIp) {\n      ipAddresses = headerIp.split(',');\n    }\n\n    if (ipAddresses.length === 0) {\n      ipAddresses = [req.connection.remoteAddress];\n    }\n\n    if (ipAddresses.length === 0) {\n      return ipAddresses;\n    }\n\n    ipAddresses = ipAddresses.map(function(ipAddress) {\n      if (iputil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')) {\n        ipAddress = ipAddress.split('::ffff:')[1];\n      }\n\n      if (iputil.isV4Format(ipAddress) && ~ipAddress.indexOf(':')) {\n        ipAddress = ipAddress.split(':')[0];\n      }\n\n      return ipAddress;\n    });\n\n    return ipAddresses;\n  }\n\n  var matchClientIp = function(ip) {\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invoke(getIps(), testIp, ip, mode);\n\n    if (mode === 'allow') {\n      return _.some(result);\n    } else {\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip, mode) {\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if (typeof constraint === 'string') {\n      if (rangeCheck.validRange(constraint)) {\n        return testCidrBlock(ip, constraint, mode);\n      } else {\n        return testExplicitIp(ip, constraint, mode);\n      }\n    }\n\n    if (typeof constraint === 'object') {\n      return testRange(ip, constraint, mode);\n    }\n  };\n\n  var testExplicitIp = function(ip, constraint, mode) {\n    if (ip === constraint) {\n      return mode === 'allow';\n    } else {\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip, constraint, mode) {\n    if (rangeCheck.inRange(ip, constraint)) {\n      return mode === 'allow';\n    } else {\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip, constraint, mode) {\n    var filteredSet = _.filter(getIps(), function(constraint) {\n      if (constraint.length > 1) {\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return longIp >= startIp && longIp <= endIp;\n      } else {\n        return ip === constraint[0];\n      }\n    });\n\n    if (filteredSet.length > 0) {\n      return mode === 'allow';\n    } else {\n      return mode === 'deny';\n    }\n  };\n\n  var error = function(ips, next) {\n    var err = new IpDeniedError('Access denied to IP address: ' + ips.join(','));\n    return next(err);\n  };\n\n  return function(req, res, next) {\n    if (settings.excluding.length > 0) {\n      var results = _.filter(settings.excluding, function(exclude) {\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if (results.length > 0) {\n        if (settings.log && settings.logLevel !== 'deny') {\n          settings.logF('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var _ips = getIps();\n    if (!_ips || !_ips.length) {\n      if (settings.mode == 'allow') {\n        // ip list is empty, thus no one allowed\n        return error(['0.0.0.0/0'], next);\n      } else {\n        // there are no blocked ips, skip\n        return next();\n      }\n    }\n\n    var ips = settings.detectIp(req);\n\n    var matchResults = ips.map(function(ip) {\n      return matchClientIp(ip);\n    });\n\n    if (_.every(matchResults)) {\n      // Grant access\n      if (settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ips.join(','));\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if (settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ips.join(','));\n    }\n\n    return error(ips, next);\n  };\n};\n"]}