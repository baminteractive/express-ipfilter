{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","module","exports","ipfilter","ips","opts","logger","message","console","log","settings","defaults","mode","logF","allowedHeaders","allowPrivateIPs","excluding","detectIp","getClientIp","req","ipAddress","headerIp","reduce","acc","header","testIp","headers","splitHeaderIp","split","connection","remoteAddress","isV6Format","indexOf","matchClientIp","ip","toLowerCase","result","invoke","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","res","next","results","exclude","regex","RegExp","test","url","logLevel","err"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *\n *      app.use(ipfilter(ips));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - `allowPrivateIPs` whether to allow private IPs.\n *  - `allowedHeaders` Array of headers to check for forwarded IPs.\n *  - 'excluding' routes that should be excluded from ip filtering\n *\n * @param [ips] {Array} IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    allowedHeaders: [],\n    allowPrivateIPs: false,\n    excluding: [],\n    detectIp: getClientIp\n  });\n\n  function getClientIp(req) {\n    var ipAddress;\n\n    var headerIp = _.reduce(settings.allowedHeaders, function(acc, header){\n      var testIp = req.headers[header];\n      if(testIp != ''){\n        acc = testIp;\n      }\n\n      return acc;\n    },'');\n\n    if(headerIp) {\n      var splitHeaderIp = headerIp.split(',');\n      ipAddress = splitHeaderIp[0];\n    }\n\n    if(!ipAddress) {\n      ipAddress = req.connection.remoteAddress;\n    }\n\n    if(!ipAddress){\n      return '';\n    }\n\n    if(iputil.isV6Format(ipAddress) && ~ipAddress.indexOf('::ffff')){\n      ipAddress = ipAddress.split('::ffff:')[1];\n    }\n\n    return ipAddress;\n  }\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invoke(ips,testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(ips,function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log && settings.logLevel !== 'deny'){\n          settings.logF('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var ip = settings.detectIp(req);\n    // If no IPs were specified, skip\n    // this middleware\n    if(!ips || !ips.length) { return next(); }\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n};\n"]}