{"version":3,"sources":["../src/ipfilter.js"],"names":["_","require","iputil","rangeCheck","IpDeniedError","proxyaddr","module","exports","ipfilter","ips","opts","getIps","isFunction","logger","message","console","log","settings","defaults","mode","logF","allowPrivateIPs","excluding","detectIp","getClientIp","trustProxy","compileTrust","val","a","i","split","compile","req","matchClientIp","ip","toLowerCase","result","invokeMap","testIp","some","every","constraint","validRange","testCidrBlock","testExplicitIp","testRange","inRange","filteredSet","filter","length","startIp","toLong","endIp","longIp","error","next","err","res","results","exclude","regex","RegExp","test","url","logLevel","_ips"],"mappings":"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","file":"ipfilter.js","sourcesContent":["/*!\n * Express - IP Filter\n * Copyright(c) 2014 Bradley and Montgomery Inc.\n * MIT Licensed\n */\n\n'use strict';\n\n/**\n * Module dependencies.\n */\nvar _ = require('lodash');\nvar iputil = require('ip');\nvar rangeCheck = require('range_check');\nvar IpDeniedError = require('./deniedError');\nvar proxyaddr = require('proxy-addr');\n\n/**\n * express-ipfilter:\n *\n * IP Filtering middleware;\n *\n * Examples:\n *\n *      var ipfilter = require('ipfilter'),\n *          ips = ['127.0.0.1'];\n *          getIps = function() { return ['127.0.0.1']; };\n *\n *      app.use(ipfilter(ips));\n *      app.use(ipfilter(getIps));\n *\n * Options:\n *\n *  - `mode` whether to deny or grant access to the IPs provided. Defaults to 'deny'.\n *  - `logF` Function to use for logging.\n *  - `log` console log actions. Defaults to true.\n *  - `allowPrivateIPs` whether to allow private IPs.\n *  - 'excluding' routes that should be excluded from ip filtering\n *  - 'trustProxy' trust proxy settings just like in express. The trust proxy setting is implemented using the proxy-addr package. (http://expressjs.com/en/guide/behind-proxies.html)\n *\n * @param [ips] {Array} IP addresses or {Function} that returns the array of IP addresses\n * @param [opts] {Object} options\n * @api public\n */\nmodule.exports = function ipfilter(ips, opts) {\n  ips = ips || false;\n\n  var getIps = _.isFunction(ips) ? ips : function(){ return ips; };\n  var logger = function(message){ console.log(message);};\n  var settings = _.defaults( opts || {}, {\n    mode: 'deny',\n    log: true,\n    logF: logger,\n    allowPrivateIPs: false,\n    excluding: [],\n    detectIp: getClientIp,\n    trustProxy: false // This is the default used by express.\n  });\n\n  /**\n   * Compile \"proxy trust\" value to function. (from express)\n   *\n   * @param  {Boolean|String|Number|Array|Function} val\n   * @return {Function}\n   * @api private\n   */\n  function compileTrust(val) {\n    if (typeof val === 'function') return val;\n\n    if (val === true) {\n      // Support plain true/falses\n      return function(){ return true; };\n    }\n\n    if (typeof val === 'number') {\n      // Support trusting hop count\n      return function(a, i){ return i < val; };\n    }\n\n    if (typeof val === 'string') {\n      // Support comma-separated values\n      val = val.split(/ *, */);\n    }\n\n    return proxyaddr.compile(val || []);\n  }\n\n  function getClientIp(req) {\n    return proxyaddr(req, compileTrust(settings.trustProxy));\n  }\n\n  var matchClientIp = function(ip){\n    var mode = settings.mode.toLowerCase();\n\n    var result = _.invokeMap(getIps(),testIp,ip,mode);\n\n    if(mode === 'allow'){\n      return _.some(result);\n    }else{\n      return _.every(result);\n    }\n  };\n\n  var testIp = function(ip,mode){\n    var constraint = this;\n\n    // Check if it is an array or a string\n    if(typeof constraint === 'string'){\n      if(rangeCheck.validRange(constraint)){\n        return testCidrBlock(ip,constraint,mode);\n      }else{\n        return testExplicitIp(ip,constraint,mode);\n      }\n    }\n\n    if(typeof constraint === 'object'){\n      return testRange(ip,constraint,mode);\n    }\n  };\n\n  var testExplicitIp = function(ip,constraint,mode){\n    if(ip === constraint){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testCidrBlock = function(ip,constraint,mode){\n    if(rangeCheck.inRange(ip, constraint)){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var testRange = function(ip,constraint,mode){\n    var filteredSet = _.filter(getIps(),function(constraint){\n      if(constraint.length > 1){\n        var startIp = iputil.toLong(constraint[0]);\n        var endIp = iputil.toLong(constraint[1]);\n        var longIp = iputil.toLong(ip);\n        return  longIp >= startIp && longIp <= endIp;\n      }else{\n        return ip === constraint[0];\n      }\n    });\n\n    if(filteredSet.length > 0){\n      return mode === 'allow';\n    }else{\n      return mode === 'deny';\n    }\n  };\n\n  var error = function(ip, next){\n    var err = new IpDeniedError('Access denied to IP address: ' + ip);\n    return next(err);\n  };\n\n  return function(req, res, next) {\n    if(settings.excluding.length > 0){\n      var results = _.filter(settings.excluding,function(exclude){\n        var regex = new RegExp(exclude);\n        return regex.test(req.url);\n      });\n\n      if(results.length > 0){\n        if(settings.log && settings.logLevel !== 'deny'){\n          settings.logF('Access granted for excluded path: ' + results[0]);\n        }\n        return next();\n      }\n    }\n\n    var _ips = getIps();\n    if(!_ips || !_ips.length) {\n      if(settings.mode == 'allow'){\n        // ip list is empty, thus no one allowed\n        return error('0.0.0.0/0', next);\n      } else {\n        // there are no blocked ips, skip\n        return next();\n      }\n    }\n\n    var ip = settings.detectIp(req);\n\n    if(matchClientIp(ip,req)) {\n      // Grant access\n      if(settings.log && settings.logLevel !== 'deny') {\n        settings.logF('Access granted to IP address: ' + ip);\n      }\n\n      return next();\n    }\n\n    // Deny access\n    if(settings.log && settings.logLevel !== 'allow') {\n      settings.logF('Access denied to IP address: ' + ip);\n    }\n\n    return error(ip, next);\n  };\n};\n"]}